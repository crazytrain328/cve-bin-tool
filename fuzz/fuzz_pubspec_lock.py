import sys
import tempfile
from pathlib import Path

import atheris
import atheris_libprotobuf_mutator
from google.protobuf.json_format import MessageToDict

import fuzz.generated.pubspec_lock_pb2 as pubspec_lock_pb2
from cve_bin_tool.cvedb import CVEDB
from cve_bin_tool.log import LOGGER

with atheris.instrument_imports():
    from cve_bin_tool.parsers.dart import DartParser

cve_db = CVEDB()
logger = LOGGER.getChild("Fuzz")


def PubspecLockBuilder(data):
    """
    This function converts the given data into a pubspec.lock file.

    Args:
        data (protobuf message): The protobuf message to convert to a pubspec.lock file.
    """
    json_data = MessageToDict(
        data, preserving_proto_field_name=True, including_default_value_fields=True
    )

    with open(file_path, "w") as f:
        f.write("# Generated by pub\n")
        f.write("packages:\n")
        for package in json_data.get("packages", []):
            name = package.get("name", "")
            version = package.get("version", "")
            url = package.get("url", "")
            dependency = package.get("dependency", "")
            f.write(f"  {name}:\n")
            f.write(f'    dependency: "{dependency}"\n')
            f.write("    description:\n")
            f.write(f"      name: {name}\n")
            f.write(f'      url: "{url}"\n')
            f.write("    source: hosted\n")
            f.write(f'    version: "{version}"\n')

        f.write("sdks:\n")
        dart = json_data.get("sdks", {}).get("dart", "")
        flutter = json_data.get("sdks", {}).get("flutter", "")
        if dart:
            f.write(f'  dart: "{dart}"\n')
        if flutter:
            f.write(f'  flutter: "{flutter}"\n')


def TestParseData(data):
    """
    Fuzz test the DartParser's handling of pubspec.lock files.

    Args:
        data (protobuf message): The protobuf message to convert to a pubspec.lock file.
    """
    try:
        PubspecLockBuilder(data)

        dart_parser = DartParser(cve_db, logger)
        dart_parser.run_checker(file_path)

    except SystemExit:
        return


file_path = str(Path(tempfile.mkdtemp(prefix="cve-bin-tool-")) / "pubspec.lock")

atheris_libprotobuf_mutator.Setup(
    sys.argv, TestParseData, proto=pubspec_lock_pb2.PubspecLock
)
atheris.Fuzz()
